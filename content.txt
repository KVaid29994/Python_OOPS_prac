Class and Object (Example)

    In Python, a class serves as a blueprint for creating objects. It defines a set of attributes 
    (data) and methods (functions) that the objects instantiated from the class will possess. By combining data and behavior into a single entity, classes
    enable encapsulation and promote the development of modular, maintainable, and scalable code.

    ''' class Car:
        def __init__(self, brand, model):
            self.brand = brand
            self.model = model

        def display_info(self):
            print(f"This car is a {self.brand} {self.model}.")

    # Creating an object
    my_car = Car("Tesla", "Model 3")
    my_car.display_info()
    '''

- Why is python called Object oriented programming?

    Python is recognized as an Object-Oriented Programming (OOP) language because it embraces the 
    fundamental principles of OOP: encapsulation, inheritance, polymorphism, and abstraction. 
    These principles allow developers to model real-world entities as objects, promoting better 
    organization, modularity, reusability, and maintainability of code. By supporting OOP, 
    Python enables developers to write cleaner,more efficient programs that are easier to extend and debug.
    --> Creating attributes from outside the class


- What are the advantages of OOPa in python?
    ---> You can create your own datatypes
    --->Modularity 🧩 Code is organized into classes and objects, making it easier to manage and maintain.
    -->Reusability 🔄 Once a class is written, it can be reused across multiple programs without rewriting.
    -->Scalability 🚀 Easier to scale large projects by organizing code logically.
    -->Data Hiding 🔒Protects sensitive data using encapsulation, allowing controlled access.
    -->Inheritance 🧬Allows new classes to reuse, extend, and modify behaviors of existing classes.
    -->Polymorphism 🎭 Same method can perform different tasks depending on the object — making code flexible and dynamic.
    -->Easier Troubleshooting 🛠️Bugs are easier to track and fix since functionality is divided into small, logical pieces.
    -->Real-world Modeling 🌎 Helps you model real-world entities naturally, making the design intuitive.


- The word (self) in OPPs python.

    #Self refers to the instance of the class that is calling the method. 
    #It differentiates between instance variables and local variables.
    In instance methods, self must be the first parameter. 
    It is automatically passed when a method is called on an object.
    # self is not a reserved keyword in Python; it’s just a naming convention. 
    You could technically use any other name, but it's highly discouraged as it reduces code readability.


- What is encapsulation?

    Encapsulation in Python is one of the fundamental principles of Object-Oriented Programming (OOP).
    It refers to the bundling of data (attributes) and methods (functions) that operate on the data into a single unit, typically a class. Encapsulation also involves 
    restricting direct access to some of the object's components to protect the integrity of the data.

    Access Modifiers: Python uses naming conventions to indicate the access level of attributes and methods:
        Public: Accessible from anywhere. (e.g., attribute_name)
        Protected: Accessible within the class and its subclasses. (e.g., _attribute_name)
        Private: Accessible only within the class. (e.g., __attribute_name)


- getter and setter methods in python?
        Getter → To access a private attribute (_attribute or __attribute) safely.

        Setter → To modify a private attribute with control/validation.

- Static Methods 
    A static method is a method inside a class that doesn’t need access to self (instance) or cls (class itself).
    It behaves like a regular function but lives inside a class for logical grouping.
     👉 Defined using @staticmethod decorator.

     When to Use Static Methods?
When the method relates to the class logically, but does not need instance or class data.

Example: utility/helper functions.


- What is Inheritance in python?

Inheritance is an OOP concept where a child class (subclass) automatically 
gets all the methods and properties of a parent class (superclass)

👉 It lets you reuse code instead of rewriting it.
Term	        Meaning
Parent class-   The class being inherited from
Child class	-   The class that inherits from the parent
super() -       Used inside child class to call parent methods

Type        	        Example
Single	                One child → One parent
Multiple	            One child → Multiple parents
Multilevel	            Child → Parent → Grandparent
Hierarchical	        One parent → Many children
Hybrid	                Combination of multiple types

When a class inherits from a parent class, it automatically gets:

Inherited	                 Meaning
✅ Instance methods          Functions defined inside the parent class
✅ Class methods	            @classmethod decorated methods
✅ Static methods	        @staticmethod decorated methods
✅ Attributes (variables)	Variables defined inside __init__ or at class level
✅ Properties	            If @property is used, getter/setter also inherited


⚡ What Does NOT Get Inherited Automatically?

Not Inherited	                      Meaning
❌ Constructor __init__()	        It gets inherited, but if the child defines its own __init__, it overrides it.
❌ Private members                   (name starting with __)	Example: self.__secret → can't be accessed directly in child.
❌ Operator Overloads                (unless manually handled)	Special methods like __add__, __str__ need explicit override if you want custom behavior.
❌ Special restrictions	             Things marked intentionally hidden or encapsulated aren't accessible unless designed.

If you redefine a method or constructor in child, it overrides the parent's version.


✅ Why Do We Need Inheritance in Python (or OOP)?

1. Code Reusability
Inheritance lets a child class reuse code from a parent class without rewriting it.

📦 2. Organized, Scalable Code
Group related classes logically (e.g., Vehicle → Car, Bike, Truck)

Easy to scale: Add or modify features in child classes without touching parent.

🛠 3. Extensibility
Child classes can override or extend parent behavior as needed.

🧱 4. Foundation for Polymorphism
Enables polymorphism: You can treat different classes as the same type.